// wykluczanie na podstawie Exchange polega na zagwarantowaniu, ze tylko 1 proces może wyciągnąć
// stan wolny (wykluczenie = 0) do zmiennej t. Przerywa to oczekiwanie i pozwala na wykonanie sekcji
// krytycznej. Ponadto, przez to, że t = 1, to zawsze po wyciągnięciu 0 natychmiastowo blokujemy
// wykluczenie dla siebie

atomic void Exchange(int &i, int &j)
{
	int t;
	t = i;
	i = j;
	j = t;
}

int wykluczenie = 0;

void Prolog(int i)
{
	int t = 1;
	while (t) Exchange(wykluczenie, t);
}

void Epilog(int i)
{
	wykluczenie = 0;
}

int in_critical[10];
void proc(int i)
{
	int x = 0;
	for (;;) {
		Prolog(i);
		in_critical[i] = 1;

		for (x = 0; x < 100; ++x) {}

		in_critical[i] = 0;
		Epilog(i);
	}
}

atomic void print_bits()
{
	int i;
	for (i = 0; i < 10; ++i) {
		cout << in_critical[i];
	}
	cout << "\n";
}

void print()
{
	for (;;) {
		print_bits();
	}
}

int main()
{
	int i = 0;
	for (i = 0; i < 10; ++i)
		in_critical[i] = 0;

	cobegin {
		for (i = 0; i < 10; ++i) {
			proc(i);
		}
		print();
	}
}
